{"version":3,"sources":["components/MrotForm.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["FormWrapper","styled","div","RadioGroup","Radio","Group","StyledRadio","props","active","StyledSwitch","Switch","checked","Text","NdflDiv","StyledSpan","span","defaultChecked","StyledInput","InputNumber","Plashka","FormikRadioGroup","children","value","onChange","as","FormikRadio","content","id","setFieldValue","useState","changeIcon","setChangeIcon","icon","text","choosenRadio","placement","trigger","overlayClassName","onVisibleChange","first","second","FormikInput","symbol","oplata","style","textAlign","display","marginTop","paddingLeft","toLocaleString","formatter","Number","toString","fontWeight","marginLeft","toNumber","str","ndflChecked","n","replace","toFixed","MrotForm","initialValues","inputR","ExclamationCircleOutlined","height","CloseCircleOutlined","onSubmit","data","console","log","values","handleSubmit","target","map","key","Math","random","name","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d4a16d1d.chunk.js","sourcesContent":["import React, { ReactElement, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Radio, Popover, Switch, InputNumber } from \"antd\";\r\nimport { Field, FieldAttributes, Formik, FormikProps } from \"formik\";\r\nimport { RadioProps } from \"antd/lib/radio\";\r\nimport { InputProps } from \"antd/lib/input\";\r\nimport {\r\n  ExclamationCircleOutlined,\r\n  CloseCircleOutlined\r\n} from \"@ant-design/icons\";\r\nimport { FormProps } from \"antd/lib/form\";\r\nimport { RadioChangeEventTarget } from \"antd/es/radio\";\r\n\r\nconst FormWrapper = styled.div`\r\n  width: 350px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin: 0 auto;\r\n  justify-content: center;\r\n  align-items: flex-start;\r\n`;\r\n\r\nconst RadioGroup = styled(Radio.Group)`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: flex-start;\r\n  justify-content: center;\r\n  padding-left: 15px;\r\n  margin-bottom: 10px;\r\n  *::after {\r\n    background-color: black;\r\n  }\r\n`;\r\n\r\nconst StyledRadio = styled(Radio)<{ active: boolean }>`\r\n  * {\r\n    border-color: ${props => (props.active ? \"black\" : \"lightgray\")}!important;\r\n  }\r\n`;\r\n\r\nconst StyledSwitch = styled(Switch)`\r\n  min-width: 32px;\r\n  margin: 0 5px;\r\n  background-color: ${props => (props.checked ? \"orange\" : \"lightgray\")};\r\n`;\r\n\r\nconst Text = styled.div`\r\n  color: lightgray;\r\n  justify-self: flex-start;\r\n  align-self: flex-start;\r\n`;\r\n\r\nconst NdflDiv = styled.div`\r\n  display: inline;\r\n  font-size: 10px;\r\n  padding-left: 43px;\r\n  font-weight: bold;\r\n`;\r\n\r\nconst StyledSpan = styled.span`\r\n  color: ${({ defaultChecked }) => (defaultChecked ? \"black\" : \"lightgray\")};\r\n`;\r\n\r\nconst StyledInput = styled(InputNumber)`\r\n  border-radius: 15px;\r\n  width: 145px;\r\n  * {\r\n    font-weight: bold;\r\n  }\r\n  margin-bottom: 10px;\r\n  .ant-input-number-handler-wrap {\r\n    display: none;\r\n  }\r\n`;\r\n\r\nconst Plashka = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: #fbf4da;\r\n  padding: 20px;\r\n  p {\r\n    span {\r\n      font-weight: bold;\r\n    }\r\n  }\r\n`;\r\n\r\nconst FormikRadioGroup: React.FC<RadioProps & FieldAttributes<any>> = ({\r\n  children,\r\n  value,\r\n  onChange\r\n}) => (\r\n  <Field as={RadioGroup} value={value} onChange={onChange}>\r\n    {children}\r\n  </Field>\r\n);\r\n\r\ninterface RadioProp {\r\n  icon:\r\n    | {\r\n        text: string;\r\n        first: () => ReactElement;\r\n        second: () => ReactElement;\r\n      }\r\n    | undefined;\r\n  choosenRadio: string;\r\n}\r\n\r\nconst FormikRadio: React.FC<RadioProps &\r\n  FieldAttributes<{\r\n    setFieldValue: (\r\n      field: string,\r\n      value: any,\r\n      shouldValidate?: boolean\r\n    ) => void;\r\n  }> &\r\n  RadioProp> = ({ value, onChange, id, setFieldValue, ...props }) => {\r\n  const [changeIcon, setChangeIcon] = useState(true);\r\n  let content;\r\n  if (props.icon) {\r\n    content = (\r\n      <div>\r\n        <p>{props.icon.text}</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Field\r\n        as={StyledRadio}\r\n        value={value}\r\n        id={id}\r\n        active={value === props.choosenRadio}\r\n      >\r\n        {value}\r\n      </Field>\r\n      {props.icon && (\r\n        <Popover\r\n          placement=\"bottomLeft\"\r\n          content={content}\r\n          trigger=\"click\"\r\n          overlayClassName={\"PopOver\"}\r\n          onVisibleChange={() => setChangeIcon(!changeIcon)}\r\n        >\r\n          {changeIcon ? props.icon.first() : props.icon.second()}\r\n        </Popover>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\ninterface InputProp {\r\n  symbol: string;\r\n  oplata: string;\r\n}\r\n\r\nconst FormikInput: React.FC<InputProps &\r\n  FormProps &\r\n  FieldAttributes<FormikProps<{}> & InputProp>> = ({\r\n  setFieldValue,\r\n  value,\r\n  symbol,\r\n  oplata\r\n}) => (\r\n  <div\r\n    style={{\r\n      textAlign: \"center\",\r\n      display: \"block\",\r\n      marginTop: \"10px\",\r\n      paddingLeft: \"43px\"\r\n    }}\r\n  >\r\n    <StyledInput\r\n      value={value.toLocaleString()}\r\n      formatter={value => Number(value!).toLocaleString()}\r\n      onChange={value => {\r\n        setFieldValue(\"inputR\", value!.toString());\r\n      }}\r\n    />\r\n\r\n    <span style={{ fontWeight: \"bold\", marginLeft: \"5px\" }}>\r\n      {symbol} {oplata === \"Оплата за день\" && \"в день\"}\r\n      {oplata === \"Оплата за час\" && \"в час\"}\r\n    </span>\r\n  </div>\r\n);\r\n\r\nfunction toNumber(\r\n  str: string,\r\n  ndflChecked: boolean = true,\r\n  n?: number | string\r\n): string {\r\n  str = str.replace(/[^\\d]/g, \"\");\r\n  if (typeof n === \"string\") {\r\n    n = n.replace(/[^\\d]/g, \"\");\r\n    return ndflChecked\r\n      ? (Number(str) + Number(n)).toLocaleString()\r\n      : Number(\r\n          (Number(str) * (1 - 0.13) + Number(n)).toFixed(0)\r\n        ).toLocaleString();\r\n  }\r\n  if (typeof n === \"number\") {\r\n    return !ndflChecked\r\n      ? Number(\r\n          (Number(str) * 0.13).toFixed(0).replace(/\\s/g, \"\")\r\n        ).toLocaleString()\r\n      : Number(\r\n          ((Number(str) * 0.13) / 0.87).toFixed(0).replace(/\\s/g, \"\")\r\n        ).toLocaleString();\r\n  }\r\n  return ndflChecked\r\n    ? Number(str).toLocaleString()\r\n    : Number((Number(str) * (1 - 0.13)).toFixed(0)).toLocaleString();\r\n}\r\n\r\nconst MrotForm: React.FC = () => {\r\n  return (\r\n    <FormWrapper>\r\n      <Formik\r\n        initialValues={{\r\n          choosenRadio: \"Оклад за месяц\",\r\n          ndflChecked: true,\r\n          inputR: \"40000\",\r\n          symbol: \"₽\",\r\n          RadioGroup: [\r\n            { id: \"1\", value: \"Оклад за месяц\" },\r\n            {\r\n              id: \"2\",\r\n              value: \"МРОТ\",\r\n              icon: {\r\n                first: () => (\r\n                  <ExclamationCircleOutlined style={{ height: 5 }} />\r\n                ),\r\n                second: () => <CloseCircleOutlined style={{ height: 5 }} />,\r\n                text:\r\n                  \"МРОТ - минимальный размер оплаты труда. Разный для разных регионов.\"\r\n              }\r\n            },\r\n            { id: \"3\", value: \"Оплата за день\" },\r\n            { id: \"4\", value: \"Оплата за час\" }\r\n          ]\r\n        }}\r\n        onSubmit={data => {\r\n          console.log(data);\r\n        }}\r\n      >\r\n        {({ values, handleSubmit, setFieldValue }) => (\r\n          <form onSubmit={handleSubmit}>\r\n            <>\r\n              <Text>Cумма</Text>\r\n              <FormikRadioGroup\r\n                value={values.choosenRadio}\r\n                onChange={({ target }: { target: RadioChangeEventTarget }) => {\r\n                  setFieldValue(\"choosenRadio\", target.value);\r\n                }}\r\n              >\r\n                {values.RadioGroup.map(({ id, value, icon }) => {\r\n                  return (\r\n                    <FormikRadio\r\n                      id={id}\r\n                      value={value}\r\n                      key={Math.random()}\r\n                      icon={icon}\r\n                      name={id}\r\n                      setFieldValue={setFieldValue}\r\n                      choosenRadio={values.choosenRadio}\r\n                    >\r\n                      {value}\r\n                    </FormikRadio>\r\n                  );\r\n                })}\r\n              </FormikRadioGroup>\r\n              {values.choosenRadio !== \"МРОТ\" && (\r\n                <>\r\n                  <NdflDiv>\r\n                    <StyledSpan defaultChecked={!values.ndflChecked}>\r\n                      Указать с НДФЛ\r\n                    </StyledSpan>\r\n                    <Field\r\n                      as={StyledSwitch}\r\n                      checked={values.ndflChecked}\r\n                      id=\"switch\"\r\n                      onChange={() => {\r\n                        setFieldValue(\"ndflChecked\", !values.ndflChecked);\r\n                      }}\r\n                    />\r\n                    <StyledSpan defaultChecked={values.ndflChecked}>\r\n                      Без НДФЛ\r\n                    </StyledSpan>\r\n                  </NdflDiv>\r\n                  <div style={{ display: \"block\" }}>\r\n                    <Field\r\n                      as={FormikInput}\r\n                      value={values.inputR}\r\n                      setFieldValue={setFieldValue}\r\n                      name=\"inputR\"\r\n                      symbol={values.symbol}\r\n                      oplata={values.choosenRadio}\r\n                    />\r\n                  </div>\r\n                </>\r\n              )}\r\n              {values.choosenRadio === \"Оклад за месяц\" && (\r\n                <Plashka>\r\n                  <p>\r\n                    <span>\r\n                      {toNumber(values.inputR, values.ndflChecked)}{\" \"}\r\n                      {values.symbol}{\" \"}\r\n                    </span>\r\n                    сотрудник будет получать на руки\r\n                  </p>\r\n                  <p>\r\n                    <span>\r\n                      {toNumber(values.inputR, values.ndflChecked, 1)}{\" \"}\r\n                      {values.symbol}{\" \"}\r\n                    </span>\r\n                    НДФЛ, 13% от оклада\r\n                  </p>\r\n                  <p>\r\n                    <span>\r\n                      {toNumber(\r\n                        values.inputR,\r\n                        values.ndflChecked,\r\n                        toNumber(values.inputR, values.ndflChecked, 1)\r\n                      ).toLocaleString()}{\" \"}\r\n                      {values.symbol}\r\n                    </span>{\" \"}\r\n                    за сотрудника в месяц\r\n                  </p>\r\n                </Plashka>\r\n              )}\r\n            </>\r\n          </form>\r\n        )}\r\n      </Formik>\r\n    </FormWrapper>\r\n  );\r\n};\r\n\r\nexport default MrotForm;\r\n","import React from 'react';\nimport './App.css';\nimport MrotForm from './components/MrotForm';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MrotForm/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"antd/dist/antd.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  //<React.StrictMode>\n  <App />,\n  //</React.StrictMode>\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}